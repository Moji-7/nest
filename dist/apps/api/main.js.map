{"version":3,"file":"main.js","mappings":"+NAAA,kCAEA,0CACA,4CACA,mCACA,kCACA,kCACA,wCACA,+BA6CA,IAAaA,UAAb,MAAaA,YAAAA,UAAS,qBA3CrB,WAAAC,QAAO,CACNC,QAAS,CACP,iBAAAC,cACA,mBAAAC,gBACA,SAAAC,kBACA,SAAAC,aAAaC,UACb,UAAAC,cAAcD,QAAQ,CAclBE,KAAM,WACNC,IAAK,yFACLC,aAAa,EAEbC,kBAAkB,EAClBC,SAAU,CAAC,+BAUb,eAAAC,kBAAkBP,QAAQ,CAC1BQ,UAAU,SAAAC,MAAKC,UAAW,KAAM,mBAGpCC,YAAa,GACbC,UAAW,CAAC,SAAAC,uBAGDpB,WAAA,QAAAA,UAAAA,S,2LCrDb,kCACA,mCACA,kCAEA,0CACA,4CACA,0CAEA,8CACA,2CAUA,IAAaI,gBAAb,MAAaA,kBAAAA,gBAAe,qBAR3B,WAAAH,QAAO,CACNC,QAAS,CAAC,SAAAG,kBACR,UAAAG,cAAca,WAAW,CAAC,iBAAAC,QAAS,iBAAAC,QAAS,mBAAAC,aAG9CN,YAAa,CAAC,qBAAAO,mBACdN,UAAW,CAAC,kBAAAO,eAAe,SAAArB,sBAEhBD,iBAAA,QAAAA,gBAAAA,e,6MCnBb,kCAUA,mCAEA,gDAEA,2CAGA,IAAaqB,kBAAb,MAAaA,kBACXE,YACmBC,eACTC,UADS,KAAAD,eAAAA,eACT,KAAAC,SAAAA,SAERC,KAAKD,SAASE,WAAW,oBAC3B,CAKMC,qB,yDAEJ,aADiCF,KAAKF,eAAeI,oBAQvD,G,CAQMC,aACoBC,cACxBC,W,yDAMA,aAJiCL,KAAKF,eAAeK,aACnDC,cACAC,UAGJ,G,GA1BA,qBAHC,WAAAC,KAAI,eACJ,YAAAC,cAAa,CAAEC,QAAS,iDACxB,YAAAC,aAAY,CAAEC,OAAQ,IAAKC,YAAa,K,6HACN,mB,GAAA,oBAAPC,SAAAA,SAAO,Y,uDAiBnC,qBANC,WAAAN,KAAI,oBACJ,YAAAC,cAAa,CACZC,QACE,wEAEH,YAAAC,aAAY,CAAEC,OAAQ,IAAKC,YAAa,KAEtC,8BAAAE,OAAM,kB,0IAEC,mB,GAAA,oBAAPD,SAAAA,SAAO,Y,iDA/BCjB,kBAAiB,qBAD7B,WAAAmB,YAAW,W,wCAGuC,mB,QAAA,IAAd,kBAAAlB,gBAAA,kBAAAA,gBAAc,UACX,mBADW,QACX,IAAlB,uBAAAN,oBAAA,uBAAAA,oBAAkB,aAH3BK,mBAAA,QAAAA,kBAAAA,iB,oMCjBb,kCACA,mCACA,mCAEA,0CAIA,IAAaC,eAAb,MAAaA,eACXC,YAEUC,eAC6BiB,YAD7B,KAAAjB,eAAAA,eAC6B,KAAAiB,WAAAA,UACpC,CAEGZ,aACJC,cACAC,W,yDAEA,MAAMW,cACY,YAAlBZ,cAA8B,qBAAuB,iBAYrD,aAXkBJ,KAAKe,WACpBE,cAAc,iBAAAzB,SACd0B,mBAAmB,WACnBC,OAAOH,cAAe,QAEtBI,UAAU,WAAahB,cAAeA,eACtCiB,UAAU,oBAAqB,SAC/BC,QAAQN,eAGRO,YAEL,G,CAEMrB,qB,yDAQJ,aAPkBF,KAAKe,WACpBE,cAAc,iBAAAzB,SACd0B,mBAAmB,WACnBC,OAAO,2CAA4C,QACnDE,UAAU,WAAY,SACrBC,QAAQ,4CACTC,YAEL,G,GApCW3B,eAAc,qBAD1B,WAAA4B,cAGI,+BAAAC,kBAAiB,iBAAAjC,UAEjB,+BAAAkC,qB,wCADiC,mB,QAAA,IAAV,UAAAC,YAAA,UAAAA,YAAU,UACyB,mBADzB,QACyB,IAAV,UAAAC,YAAA,UAAAA,YAAU,aAJlDhC,gBAAA,QAAAA,eAAAA,c,6MCRb,kCAaA,0CAIA,2CAGA,IAAaiC,kBAAb,MAAaA,kBACXhC,YAA6BiC,gBAAA,KAAAA,eAAAA,cAAiC,CAIxDC,IAAaC,W,yDACjB,OAAIC,OAAOC,KAAKF,WAAWG,aACZnC,KAAK8B,eAAeM,YAAYJ,iBAC7BhC,KAAK8B,eAAeO,SACxC,G,CAGMC,KAAkBC,I,yDACtB,MAAMC,cAAgBxC,KAAK8B,eAAeW,QAAQF,IAClD,IAAKC,QAAS,MAAM,IAAI,SAAAE,kBAAkB,2BAC1C,OAAOF,OACT,G,CAGAG,IAAYH,SACV,OAAOxC,KAAK8B,eAAec,OAAOJ,QACpC,CAGMK,OAAeC,IAA2BP,I,yDAE9C,GAA+B,WADHvC,KAAK8B,eAAee,OAAON,GAAIO,MACzCC,SAChB,MAAM,IAAI,SAAAL,kBAAkB,qBAE9B,OAAO,GACT,G,CAEAM,OAAkCT,IAChCvC,KAAK8B,eAAekB,OAAOT,GAC7B,GA7BA,qBADC,WAAAjC,KAAI,KACM,8BAAA2C,U,qLAOX,qBADC,WAAA3C,KAAI,QACO,8BAAAO,OAAM,O,sLAOlB,qBADC,WAAAqC,QACI,8BAAAC,S,mFAAuB,mB,QAAA,IAAP,iBAAA1D,SAAA,iBAAAA,SAAO,Y,wFAK5B,qBADC,WAAA2D,OAAM,OACO,8BAAAD,SAAsB,8BAAAtC,OAAM,O,mFAAT,mB,QAAA,IAAP,iBAAApB,SAAA,iBAAAA,SAAO,mB,uCAAmC,mB,GAAA,oBAAPmB,SAAAA,SAAO,Y,2CAQpE,qBADC,WAAAyC,QAAO,OACA,8BAAAxC,OAAM,KAAM,SAAAyC,e,uLAhCTzB,kBAAiB,qBAD7B,WAAAf,YAAW,W,wCAEiD,mB,QAAA,IAAd,kBAAAyC,gBAAA,kBAAAA,gBAAc,aADhD1B,mBAAA,QAAAA,kBAAAA,iB,iMCpBb,kCAGA,mCACA,mCAEA,0CAGA,IAAa0B,eAAb,MAAaA,eACX1D,YAEU2D,mBAAA,KAAAA,kBAAAA,iBACP,CAEGpB,YAAYqB,W,yDAChB,IAAIC,kBAAoB1D,KAAKqC,UAG7B,OAFIoB,YACJC,YAAcA,YAAYC,QAAOC,QAAUA,OAAOC,OAASJ,aACpDC,WACT,G,CACArB,UACE,OAAOrC,KAAKwD,kBAAkBlB,MAChC,CAEAG,QAAQF,IACN,OAAOvC,KAAKwD,kBAAkBM,UAAU,CAACvB,IAC3C,CAEAK,OAAOmB,SACL,OAAO/D,KAAKwD,kBAAkBQ,KAAKD,QACrC,CAEAf,OAAOT,IACL,OAAOvC,KAAKwD,kBAAkBS,OAAO1B,GACvC,CACAM,OAAON,GAAWC,SAChB,OAAOxC,KAAKwD,kBAAkBX,OAAON,GAAGC,QAC1C,GA7BWe,eAAc,qBAD1B,WAAA/B,cAGI,+BAAAC,kBAAiB,iBAAAhC,U,wCACmB,mB,QAAA,IAAV,UAAAkC,YAAA,UAAAA,YAAU,aAH5B4B,gBAAA,QAAAA,eAAAA,c,+MCTb,kCAaA,4CAIA,6CAGA,IAAaW,oBAAb,MAAaA,oBACXrE,YAA6BsE,kBAAA,KAAAA,iBAAAA,gBAAqC,CAI5DpC,IAAaC,W,yDACjB,OAAIC,OAAOC,KAAKF,WAAWG,aACZnC,KAAKmE,iBAAiB/B,YAAYJ,iBAC/BhC,KAAKmE,iBAAiB9B,SAC1C,G,CAGMC,KAAkBC,I,yDACtB,MAAM6B,gBAAkBpE,KAAKmE,iBAAiB1B,QAAQF,IACtD,IAAK6B,UAAW,MAAM,IAAI,SAAA1B,kBAAkB,2BAC5C,OAAO0B,SACT,G,CAGAzB,IAAYyB,WACV,OAAOpE,KAAKmE,iBAAiBvB,OAAOwB,UACtC,CAGMvB,OAAeC,IAA6BP,I,yDAEhD,GAA+B,WADHvC,KAAKmE,iBAAiBtB,OAAON,GAAIO,MAC3CC,SAChB,MAAM,IAAI,SAAAL,kBAAkB,uBAE9B,OAAO,GACT,G,CAEAM,OAAkCT,IAChCvC,KAAKmE,iBAAiBnB,OAAOT,GAC/B,GA7BA,qBADC,WAAAjC,KAAI,KACM,8BAAA2C,U,uLAOX,qBADC,WAAA3C,KAAI,QACO,8BAAAO,OAAM,O,wLAOlB,qBADC,WAAAqC,QACI,8BAAAC,S,mFAA2B,mB,QAAA,IAAT,mBAAAzD,WAAA,mBAAAA,WAAS,Y,0FAKhC,qBADC,WAAA0D,OAAM,OACO,8BAAAD,SAAwB,8BAAAtC,OAAM,O,mFAAT,mB,QAAA,IAAT,mBAAAnB,WAAA,mBAAAA,WAAS,mB,uCAAmC,mB,GAAA,oBAAPkB,SAAAA,SAAO,Y,6CAQtE,qBADC,WAAAyC,QAAO,OACA,8BAAAxC,OAAM,KAAM,SAAAyC,e,yLAhCTY,oBAAmB,qBAD/B,WAAApD,YAAW,a,wCAEqD,mB,QAAA,IAAhB,oBAAAuD,kBAAA,oBAAAA,kBAAgB,aADpDH,qBAAA,QAAAA,oBAAAA,mB,mMCpBb,kCAGA,mCACA,mCAEA,4CAGA,IAAaG,iBAAb,MAAaA,iBACXxE,YAEUyE,qBAAA,KAAAA,oBAAAA,mBACP,CAGGlC,YAAYqB,W,yDAChB,IAAIC,kBAAoB1D,KAAKqC,UAG7B,OAFIoB,YACJC,YAAcA,YAAYC,QAAOC,QAAUA,OAAOC,OAASJ,aACpDC,WACT,G,CACArB,UACE,OAAOrC,KAAKsE,oBAAoBhC,MAClC,CAEAG,QAAQF,IACN,OAAOvC,KAAKsE,oBAAoBR,UAAU,CAACvB,IAC7C,CAEAK,OAAOmB,SACL,OAAO/D,KAAKsE,oBAAoBN,KAAKD,QACvC,CAEAf,OAAOT,IACL,OAAOvC,KAAKsE,oBAAoBL,OAAO1B,GACzC,CACAM,OAAON,GAAW6B,WAChB,OAAOpE,KAAKsE,oBAAoBzB,OAAON,GAAG6B,UAC5C,GA9BWC,iBAAgB,qBAD5B,WAAA7C,cAGI,+BAAAC,kBAAiB,mBAAA/B,Y,wCACqB,mB,QAAA,IAAV,UAAAiC,YAAA,UAAAA,YAAU,aAH9B0C,kBAAA,QAAAA,iBAAAA,gB,6LCTb,mCACA,0CAEA,IAAa5E,QAAb,MAAaA,UAEX,qBADC,YAAA8E,0B,yEAKD,qBAFC,YAAAC,WACA,YAAAA,QAAO,CAAEX,KAAM,aAAc1B,OAAQ,M,2EAItC,qBADC,YAAAsC,YAAU,IAAM,iBAAAjF,UAAUkF,SAAYA,QAAQlC,SAAQ,CAACmC,SAAS,I,8EAIjE,qBADC,YAAAC,kBAAiB,CAACjG,KAAM,c,iCACP,mB,GAAA,oBAAJkG,MAAAA,MAAI,Y,wCAGlB,qBADC,YAAAC,kBAAiB,CAACnG,KAAM,c,iCACN,mB,GAAA,oBAAJkG,MAAAA,MAAI,Y,yCAfRpF,QAAO,qBADnB,YAAAsF,QAAO,YACKtF,SAAA,QAAAA,QAAAA,O,+LCHb,mCACA,0CAEA,IAAaC,UAAb,MAAaA,YAEX,qBADC,YAAA6E,wBAAuB,CAACV,KAAK,O,2EAI9B,qBADC,YAAAW,QAAO,CAAEX,KAAM,OAAQ1B,OAAQ,M,6EAKhC,qBAFC,YAAAsC,YAAU,IAAM,iBAAAjF,UAAUkF,SAAYA,QAAQN,aAC9C,YAAAY,YAAW,CAAEnB,KAAM,c,gFAKpB,qBADC,YAAAe,kBAAiB,CAACjG,KAAM,c,iCACP,mB,GAAA,oBAAJkG,MAAAA,MAAI,Y,0CAGlB,qBADC,YAAAC,kBAAiB,CAACnG,KAAM,c,iCACN,mB,GAAA,oBAAJkG,MAAAA,MAAI,Y,2CAhBRnF,UAAS,qBADrB,YAAAqF,QAAO,cACKrF,WAAA,QAAAA,UAAAA,S,sMCHb,mCACA,0CACA,4CAEA,IAAaF,QAAb,MAAaA,UAEX,qBADC,YAAA+E,wBAAuB,CAACV,KAAK,O,yEAI9B,qBADC,YAAAW,QAAO,CAAErC,OAAQ,M,2EAIlB,qBADC,YAAAqC,QAAO,CAAE7F,KAAM,OAAQkF,KAAM,kB,iCACb,mB,GAAA,oBAAJgB,MAAAA,MAAI,Y,wCAQjB,qBALC,YAAAL,QAAO,CAAEX,KAAM,eACf,YAAAoB,YAAU,IAAM,iBAAAxF,UAAU+C,SAAYA,QAAQ0C,UAAS,CAAEC,SAAU,aAGnE,YAAAH,YAAW,CAAEnB,KAAM,YAAauB,qBAAsB,O,iCACvC,mB,QAAA,IAAP,iBAAA3F,SAAA,iBAAAA,SAAO,Y,oCAKhB,qBAHC,YAAA+E,QAAO,CAAEX,KAAM,iBACf,YAAAoB,YAAU,IAAM,mBAAAvF,YAAY0E,WAAcA,UAAUc,YACpD,YAAAF,YAAW,CAAEnB,KAAM,cAAeuB,qBAAsB,O,iCACrC,mB,QAAA,IAAT,mBAAA1F,WAAA,mBAAAA,WAAS,Y,sCAIpB,qBADC,YAAAkF,kBAAiB,CAACjG,KAAM,c,iCACP,mB,GAAA,oBAAJkG,MAAAA,MAAI,Y,wCAGlB,qBADC,YAAAC,kBAAiB,CAACnG,KAAM,c,iCACN,mB,GAAA,oBAAJkG,MAAAA,MAAI,Y,yCA5BRrF,QAAO,qBADnB,YAAAuF,QAAO,YACKvF,SAAA,QAAAA,QAAAA,O,+LCJb,mCAWA,IAAa6F,aAAb,MAAaA,eAET,qBADC,YAAAC,c,8EAID,qBADC,YAAAA,c,gFAID,qBADC,YAAAA,c,iCACgB,mB,GAAA,oBAAJT,MAAAA,MAAI,Y,6CAGjB,qBADC,YAAAS,c,uFAID,qBADC,YAAAA,c,uFAID,qBADC,YAAAA,c,qFAID,qBADC,YAAAA,c,uFAnBQD,aAAY,qBARxB,YAAAE,YAAW,CACXC,WAAY,kUAOAH,cAAA,QAAAA,aAAAA,Y,mNCXb,kCAmBA,0CAKA,2CAGA,IAAaI,kBAAb,MAAaA,kBACX5F,YAA6B6F,gBAAA,KAAAA,eAAAA,cAAiC,CAIxDC,YAEWC,KACCC,MACDC,KACCC,O,yDAUhB,aAP+B/F,KAAK0F,eAAeM,mBACjDJ,KACAC,MACAC,KACAC,MAQJ,G,CAGMzD,KAAkBC,I,yDACtB,MAAMmC,cAAgB1E,KAAK0F,eAAejD,QAAQF,IAClD,IAAKmC,QAAS,MAAM,IAAI,SAAAhC,kBAAkB,2BAC1C,OAAOgC,OACT,G,CAGA9B,OAAe8B,SACb,OAAO1E,KAAK0F,eAAe9C,OAAO8B,QACpC,CAGM7B,OACIoD,WACK1D,I,yDAGb,GAAgC,WADHvC,KAAK0F,eAAe7C,OAAON,GAAI0D,aACzClD,SACjB,MAAM,IAAI,SAAAL,kBAAkB,qBAE9B,OAAO,GACT,G,CAGAM,OAAkCT,IAChCvC,KAAK0F,eAAe1C,OAAOT,GAC7B,GAjDA,qBAFC,WAAAW,MAAK,WAIH,8BAAAD,OAAM,SACN,8BAAAA,OAAM,UACN,8BAAAA,OAAM,SACN,8BAAAA,OAAM,U,wJACC,mB,GAAA,oBAAPrC,SAAAA,SAAO,Y,gDAiBV,qBADC,WAAAN,KAAI,QACO,8BAAAO,OAAM,O,mIAA0B,mB,GAAA,oBAAPD,SAAAA,SAAO,Y,yCAO5C,qBADC,WAAAsC,QACO,8BAAAC,S,mFAAuB,mB,QAAA,IAAP,iBAAA3D,SAAA,iBAAAA,SAAO,Y,2FAK/B,qBADC,WAAA0G,KAAI,QAEF,8BAAA/C,SACA,8BAAAtC,OAAM,O,mFADoB,mB,QAAA,IAAP,iBAAArB,SAAA,iBAAAA,SAAO,mB,uCAEnB,mB,GAAA,oBAAPoB,SAAAA,SAAO,Y,2CASV,qBADC,WAAAyC,QAAO,OACA,8BAAAxC,OAAM,KAAM,SAAAyC,e,uLApDTmC,kBAAiB,qBAD7B,WAAA3E,YAAW,W,wCAEiD,mB,QAAA,IAAd,kBAAAqF,gBAAA,kBAAAA,gBAAc,aADhDV,mBAAA,QAAAA,kBAAAA,iB,gMC3Bb,kCAEA,0CACA,0CACA,4CACA,mDAEA,8CACA,2CACA,mCAEA,6CACA,gDACA,8CACA,2CAEA,2CAmBA,IAAapH,cAAb,MAAaA,cACXwB,YAA6BuG,gBAAA,KAAAA,eAAAA,cAAiC,CACxDC,yB,yDAEN,G,CAEcC,kB,+DACNtG,KAAKoG,eAAeG,aAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,UAAWxG,KAAKoG,eAAeK,iBACvD,IAAK,IAAID,EAAI,EAAGA,EAAI,IAAKA,UAAWxG,KAAKoG,eAAeM,oBAElD1G,KAAKoG,eAAeO,mBAC5B,G,GAZWtI,cAAa,qBAdzB,WAAAF,QAAO,CACNC,QAAS,CAAC,UAAAM,cAAca,WAAW,CAAC,iBAAAC,QAAS,iBAAAC,QAAS,mBAAAC,UAAU,0BAAA2F,gBAChEjG,YAAa,CACX,qBAAAqG,kBACA,uBAAAvB,oBACA,qBAAArC,mBAEFxC,UAAW,CACT,kBAAA8G,eACA,oBAAA9B,iBACA,kBAAAd,eACA,kBAAAqD,kB,wCAIyD,mB,QAAA,IAAd,kBAAAA,gBAAA,kBAAAA,gBAAc,aADhDvI,eAAA,QAAAA,cAAAA,a,uMCnCb,kCAEA,0CACA,mCACA,mCAIA,mDAKA,IAAa8H,eAAb,MAAaA,eACXtG,YAEUgH,mBAEAC,uBAC6B/F,YAH7B,KAAA8F,mBAAAA,mBAEA,KAAAC,uBAAAA,uBAC6B,KAAA/F,WAAAA,UAGvC,CAGMiF,mBACJJ,KACAC,MACAC,KACAC,O,yDAGA,MAEQgB,KAAMC,mBAAqBhH,KAAKe,WAAWkG,QAAQC,aAAa,0BAAA7B,aAAa,CACnF8B,MAAO,CAAC,CACNtD,MAAM,YAAAuD,OAAM,IAAIrB,YAGlBF,MAAO,CACL,CAACD,MAAOC,OAEZwB,KAVW,GAWXC,KAXW,IAWJxB,KAAO,KAEb,MAAO,CACNyB,eAAgBR,KAChBS,MAAOR,MAGX,G,CAEMvE,QAAQF,I,yDAIZ,aAFsBvC,KAAK8G,uBAAuBhD,UAAU,CAAEvB,IAGhE,G,CAEAK,OAAOpD,SACL,OAAOQ,KAAK6G,mBAAmB7C,KAAKxE,QAEtC,CACMqD,OACJN,GACA0D,Y,yDAIA,aAFsBjG,KAAK6G,mBAAmBhE,OAAON,GAAI0D,WAG3D,G,CACAjD,OAAOT,IACL,OAAOvC,KAAK6G,mBAAmB5C,OAAO1B,GACxC,GA5DW4D,eAAc,qBAD1B,WAAA3E,cAGI,+BAAAC,kBAAiB,iBAAAjC,UAEjB,+BAAAiC,kBAAiB,0BAAA4D,eAEjB,+BAAA3D,qB,wCAHqC,mB,QAAA,IAAV,UAAAC,YAAA,UAAAA,YAAU,UAEI,mBAFJ,QAEI,IAAV,UAAAA,YAAA,UAAAA,YAAU,UACiB,mBADjB,QACiB,IAAV,UAAAC,YAAA,UAAAA,YAAU,aANlDuE,gBAAA,QAAAA,eAAAA,c,4JCbb,uDACA,sD,8LCDA,kCAIA,IAAa7G,mBAAb,MAAaA,2BAA2B,SAAAmI,cAItCC,IAAIC,WAAiBC,gBAAwB,CAE7CC,YACE7H,KAAK0H,IAAI,uBACX,CAKAI,MAAMH,QAAcI,MAAgBC,SAGpC,CAKAC,KAAKN,WAAiBC,gBAAwB,GArBnCtI,mBAAkB,qBAD9B,WAAAkC,YAAW,CAAE0G,MAAO,SAAAC,MAAMC,aACd9I,oBAAA,QAAAA,mBAAAA,kB,6LCHb,kCACA,gDAMA,IAAaf,kBAAb,MAAaA,oBAAAA,kBAAiB,qBAJ7B,WAAAJ,QAAO,CACNkB,UAAW,CAAC,uBAAAC,oBACZ+I,QAAS,CAAC,uBAAA/I,uBAECf,mBAAA,QAAAA,kBAAAA,iB,4MCNb,uCAGA,oCAAmCqF,QACjC,OAAO0E,cACT,EACA,oCAAmC1E,QACjC,OAAO2E,cACT,EACA,oCAAmC3E,QACjC,OAAO4E,cACT,EACA,MAAMF,aAAe,KAAW,CAC9BG,YAAa,QAAAC,MAAMC,QAAQ5E,YAGvBwE,aAAe,KAAW,CAC9BK,UAAW,QAAAF,MAAMG,QAAQC,aAAa,CAAC,OAAQ,UAAW,uBAAuB,uBAAuB,OAAO,UAAU,UAAU,aAAa,cAAc,kBAG1JN,aAAe,KAAW,CAC9B3E,KAAM,QAAA6E,MAAM7E,KAAKkF,YAAa,IAAK,QAAAL,MAAM7E,KAAKmF,WAC9CC,YAAa,QAAAP,MAAMQ,KAAKC,QAAQ,aAAc,cAC9CC,UAAW,QAAAV,MAAMW,SAASC,OAAO,CAAC,IAAO,GAAG,IAAO,KAEnD9G,QAAQ+F,eACRnE,UAAUkE,gB,iMC5BZ,kCACA,mCACA,0CAEA,4CACA,0CAEA,sCAWA,IAAa1B,eAAb,MAAaA,eACX/G,YAA6B0J,eAAA,KAAAA,cAAAA,aAA+B,CAEtDhD,a,+DACE3F,QAAQ4I,IAAI,CAChBxJ,KAAKuJ,cAAcxD,MACjB,sMAKA,OAIN,G,CACMU,iB,+DACE7F,QAAQ4I,IAAI,CAChBxJ,KAAKuJ,cAAcvF,KAAK,mBAAAtE,WAAW,gBAAA+J,oBAAmB,cACtDzJ,KAAKuJ,cAAcvF,KAAK,iBAAAvE,SAAS,gBAAAiK,oBAAmB,aAGxD,G,CACMhD,c,+DACE9F,QAAQ4I,IAAI,CAChBxJ,KAAKuJ,cAAcvF,KAAK,iBAAAxE,SAAS,gBAAAmK,oBAAmB,aAExD,G,CACMhD,oB,+DACE/F,QAAQ4I,IAAI,CAChBxJ,KAAKuJ,cAAcxD,MACjB,oJAKA,OAGN,G,GAvCWa,eAAc,qBAD1B,WAAApF,c,wCAE0D,mB,QAAA,IAAb,UAAAoI,eAAA,UAAAA,eAAa,aAD9ChD,gBAAA,QAAAA,eAAAA,c,eClBbiD,OAAOxB,QAAUyB,QAAQ,kB,eCAzBD,OAAOxB,QAAUyB,QAAQ,iB,eCAzBD,OAAOxB,QAAUyB,QAAQ,iB,eCAzBD,OAAOxB,QAAUyB,QAAQ,e,eCAzBD,OAAOxB,QAAUyB,QAAQ,uB,eCAzBD,OAAOxB,QAAUyB,QAAQ,kB,eCAzBD,OAAOxB,QAAUyB,QAAQ,kB,eCAzBD,OAAOxB,QAAUyB,QAAQ,Q,eCAzBD,OAAOxB,QAAUyB,QAAQ,U,cCAzBD,OAAOxB,QAAUyB,QAAQ,O,GCCrBC,yBAA2B,CAAC,EAGhC,SAASC,oBAAoBC,UAE5B,IAAIC,aAAeH,yBAAyBE,UAC5C,QAAqBE,IAAjBD,aACH,OAAOA,aAAa7B,QAGrB,IAAIwB,OAASE,yBAAyBE,UAAY,CAGjD5B,QAAS,CAAC,GAOX,OAHA+B,oBAAoBH,UAAUJ,OAAQA,OAAOxB,QAAS2B,qBAG/CH,OAAOxB,OACf,C,+JChBA,mCACA,gCAEA,sCACA,mCAIA,W,kDACE,MAAMgC,UAAY,OAAAC,YAAY1H,OAAO,aAAA1E,UAAW,CAC9CqM,MAAM,IAGRF,IAAIG,gBADiB,OASrB,MAAMC,QAAS,IAAI,UAAAC,iBAChBC,SAAS,qBACTC,eAAe,yCACfC,WAAW,OACXC,OAAO,mBACPC,QACGC,SAAW,UAAAC,cAAcC,eAAeb,IAAKI,QACnD,UAAAQ,cAAcE,MAAM,MAAOd,IAAKW,UAKhC,MAAMI,KAAOC,QAAQC,IAAIC,MAAQ,WAC3BlB,IAAImB,OAAOJ,MACjBf,IAAIoB,eAAe,IAAI,SAAAC,eAAe,CAACC,WAAW,KAClD,SAAAC,OAAOlE,IACL,kDAAkD0D,WAEtD,G,CAEAS,E","sources":["webpack://rihal/./apps/api/src/app/app.module.ts","webpack://rihal/./apps/api/src/app/domains/reporting/reporting.module.ts","webpack://rihal/./apps/api/src/app/domains/reporting/reports.controller.ts","webpack://rihal/./apps/api/src/app/domains/reporting/reports.service.ts","webpack://rihal/./apps/api/src/app/domains/student/classes.controller.ts","webpack://rihal/./apps/api/src/app/domains/student/classes.service.ts","webpack://rihal/./apps/api/src/app/domains/student/countries.controller.ts","webpack://rihal/./apps/api/src/app/domains/student/countries.service.ts","webpack://rihal/./apps/api/src/app/domains/student/entities/classes.entity.ts","webpack://rihal/./apps/api/src/app/domains/student/entities/countries.entity.ts","webpack://rihal/./apps/api/src/app/domains/student/entities/student.entity.ts","webpack://rihal/./apps/api/src/app/domains/student/entities/studentClass.viewentity.ts","webpack://rihal/./apps/api/src/app/domains/student/student.controller.ts","webpack://rihal/./apps/api/src/app/domains/student/student.module.ts","webpack://rihal/./apps/api/src/app/domains/student/student.service.ts","webpack://rihal/./apps/api/src/app/logger/index.ts","webpack://rihal/./apps/api/src/app/logger/rihal-logger.service.ts","webpack://rihal/./apps/api/src/app/logger/rihalLogger.module.ts","webpack://rihal/./apps/api/src/app/seeds/initialSeed.ts","webpack://rihal/./apps/api/src/app/seeds/seeding.service.ts","webpack://rihal/external commonjs \"@faker-js/faker\"","webpack://rihal/external commonjs \"@nestjs/common\"","webpack://rihal/external commonjs \"@nestjs/config\"","webpack://rihal/external commonjs \"@nestjs/core\"","webpack://rihal/external commonjs \"@nestjs/serve-static\"","webpack://rihal/external commonjs \"@nestjs/swagger\"","webpack://rihal/external commonjs \"@nestjs/typeorm\"","webpack://rihal/external commonjs \"tslib\"","webpack://rihal/external commonjs \"typeorm\"","webpack://rihal/external node-commonjs \"path\"","webpack://rihal/webpack/bootstrap","webpack://rihal/./apps/api/src/main.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\r\n\r\nimport { StudentModule } from './domains/student/student.module';\r\nimport { ReportingModule } from './domains/reporting/reporting.module';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { RihalLoggerModule, RihalLoggerService } from './logger';\r\nimport { ServeStaticModule } from '@nestjs/serve-static';\r\nimport { join } from 'path';\r\n\r\n@Module({\r\n  imports: [\r\n    StudentModule,\r\n    ReportingModule,\r\n    RihalLoggerModule,\r\n    ConfigModule.forRoot(),\r\n    TypeOrmModule.forRoot({\r\n      //\r\n      // // locally database\r\n      // type: 'postgres',\r\n      // host: 'localhost', //configService.get<string>('DATABASE_HOST'),\r\n      // port: 5432, //parseInt(configService.get<string>('DATABASE_PORT')),\r\n      // username: 'postgres', //configService.get<string>('DATABASE_USER'),\r\n      // password: 'root', //configService.get<string>('DATABASE_PASS'),\r\n      // database: 'rihaldb', //configService.get<string>('DATABASE_NAME'),\r\n      // entities: ['dist/**/*.entity{.ts,.js}'],\r\n      // synchronize: true, // This for development\r\n      // autoLoadEntities: true,\r\n\r\n      //1 elephentSQL\r\n        type: 'postgres',\r\n        url: 'postgres://kfawlatn:dUMCryTxhvULGBSAYPA-3pazDHSbE30k@dumbo.db.elephantsql.com/kfawlatn',\r\n        synchronize: true,\r\n       // logging: true,\r\n        autoLoadEntities: true,\r\n        entities: ['dist/**/*.entity{.ts,.js}'],\r\n\r\n      // //2 heroku\r\n      // url: 'postgres://dyjinesbtbjwab:fad4f80e287db7a0781b527e964902970452bd4677ef33eaae64c773e67e2442@ec2-44-210-36-247.compute-1.amazonaws.com:5432/d2m7n1a4j8m4nn',\r\n      // ssl: {\r\n      //   rejectUnauthorized: false,\r\n      // },\r\n      // entities: ['dist/**/*.entity{.ts,.js}'],\r\n      //3 local host\r\n    }),\r\n      ServeStaticModule.forRoot({\r\n      rootPath: join(__dirname, '..', 'admin-portal'),\r\n    }),\r\n  ],\r\n  controllers: [],\r\n  providers: [RihalLoggerService],\r\n  // exports:[RihalLoggerModule]\r\n})\r\nexport class AppModule {}\r\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { RihalLoggerModule } from '../../logger';\n\nimport { Classes } from '../student/entities/classes.entity';\nimport { Countries } from '../student/entities/countries.entity';\nimport { Student } from '../student/entities/student.entity';\n\nimport { ReportsController } from './reports.controller';\nimport { ReportsService } from './reports.service';\n\n@Module({\n  imports: [RihalLoggerModule,\n    TypeOrmModule.forFeature([Student, Classes, Countries]),\n\n  ],\n  controllers: [ReportsController],\n  providers: [ReportsService,RihalLoggerModule],\n})\nexport class ReportingModule {}\n","import {\r\n  Body,\r\n  Controller,\r\n  Get,\r\n  HttpException,\r\n  HttpStatus,\r\n  NotFoundException,\r\n  Param,\r\n  Query,\r\n} from '@nestjs/common';\r\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\r\nimport { StudentSummeryInfo } from '@rihal/data-models';\r\nimport { RihalLoggerService } from '../../logger/rihal-logger.service';\r\n\r\nimport { ReportsService } from './reports.service';\r\n\r\n@Controller('reports')\r\nexport class ReportsController {\r\n  constructor(\r\n    private readonly reportsService: ReportsService,\r\n    private myLogger: RihalLoggerService\r\n  ) {\r\n    this.myLogger.setContext('ReportsController');\r\n  }\r\n\r\n  @Get('ageAverage')\r\n  @ApiOperation({ summary: 'for get count of students per year of birth' })\r\n  @ApiResponse({ status: 200, description: '' })\r\n  async averageStudentsAge(): Promise<StudentSummeryInfo[]> {\r\n    const summeryInfoService = await this.reportsService.averageStudentsAge();\r\n    return summeryInfoService;\r\n    // const average = summeryInfoService.reduce(function (avg, value, _, { length }) {\r\n    //   return avg + value.year / length ;\r\n    // return {title:avg + value.year / length , count:length};\r\n    //  }, 0);\r\n    //this.myLogger.customLog();this.myLogger.warn('About to return cats!');\r\n    //throw new HttpException('This is not acceptable', HttpStatus.NOT_ACCEPTABLE);\r\n  }\r\n\r\n  @Get('/:relatedEntity')\r\n  @ApiOperation({\r\n    summary:\r\n      'for get count of students per each input entity(classes,countries)',\r\n  })\r\n  @ApiResponse({ status: 200, description: '' })\r\n  async fetchCountBy(\r\n    @Param('relatedEntity') relatedEntity: string,\r\n    studentId: number\r\n  ): Promise<StudentSummeryInfo[]> {\r\n    const summeryInfoService = await this.reportsService.fetchCountBy(\r\n      relatedEntity,\r\n      studentId\r\n    );\r\n    return summeryInfoService;\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { DataSource, Repository } from 'typeorm';\r\nimport { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\nimport { StudentSummeryInfo } from '@rihal/data-models';\r\nimport { Student } from '../student/entities/student.entity';\r\n\r\n\r\n@Injectable()\r\nexport class ReportsService {\r\n  constructor(\r\n    @InjectRepository(Student)\r\n    private reportsService: Repository<Student>,\r\n    @InjectDataSource() private readonly datasource: DataSource\r\n  ) {}\r\n\r\n  async fetchCountBy(\r\n    relatedEntity: string,\r\n    studentId: number\r\n  ): Promise<StudentSummeryInfo[]> {\r\n    const relatedColumn =\r\n    relatedEntity === 'classes' ? 'classes.class_name' : 'countries.name';\r\n    const res = await this.datasource\r\n      .getRepository(Student)\r\n      .createQueryBuilder('student')\r\n      .select(relatedColumn, 'name')\r\n      //.addSelect('student.name')\r\n      .innerJoin('student.' + relatedEntity, relatedEntity)\r\n      .addSelect('count(student.id)', 'value')\r\n      .groupBy(relatedColumn)\r\n      //.addGroupBy('student.name')\r\n      //.where('student.name = :name', { name: groupbyCol })\r\n      .getRawMany();\r\n    return res;\r\n  }\r\n\r\n  async averageStudentsAge(): Promise<StudentSummeryInfo[]> {\r\n    const res = await this.datasource\r\n      .getRepository(Student)\r\n      .createQueryBuilder('student')\r\n      .select('EXTRACT(YEAR FROM student.date_of_birth)', 'name')\r\n      .addSelect('count(*)', 'value')\r\n       .groupBy('EXTRACT(YEAR FROM student.date_of_birth)')\r\n      .getRawMany();\r\n    return res;\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  NotFoundException,\r\n  Param,\r\n  ParseIntPipe,\r\n  Patch,\r\n  Post,\r\n  Query,\r\n} from '@nestjs/common';\r\n\r\nimport { Classes } from './entities/classes.entity';\r\n\r\n//import { Message } from '@rihal/api-interfaces';\r\n\r\nimport { ClassesService } from './classes.service';\r\n\r\n@Controller('classes')\r\nexport class ClassesController {\r\n  constructor(private readonly classesService: ClassesService) {}\r\n\r\n\r\n  @Get('/')\r\n  async get(@Query() filterDTO: string) {\r\n    if (Object.keys(filterDTO).length)\r\n      return await this.classesService.getFiltered(filterDTO);\r\n    else return await this.classesService.findAll();\r\n  }\r\n\r\n  @Get('/:id')\r\n  async find(@Param('id') id: number) {\r\n    const classes = await this.classesService.findOne(id);\r\n    if (!classes) throw new NotFoundException('Product does not exist!');\r\n    return classes;\r\n  }\r\n\r\n  @Post()\r\n  add(@Body() classes: Classes) {\r\n    return this.classesService.create(classes);\r\n  }\r\n\r\n  @Patch(':id')\r\n  async update(@Body() dto: Classes, @Param('id') id: number): Promise<number> {\r\n    const updatedResult = await this.classesService.update(id, dto);\r\n    if (updatedResult.affected === 0)\r\n      throw new NotFoundException('classes not found');\r\n    // const {name} = updatedResult\r\n    return 204;\r\n  }\r\n  @Delete(':id')\r\n  remove(@Param('id', ParseIntPipe) id) {\r\n    this.classesService.remove(id);\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\n//import { Message } from '@rihal/api-interfaces';\r\n\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { DeleteResult, Repository } from 'typeorm';\r\n\r\nimport { Classes } from './entities/classes.entity';\r\n\r\n@Injectable()\r\nexport class ClassesService {\r\n  constructor(\r\n    @InjectRepository(Classes)\r\n    private classesRepository: Repository<Classes>\r\n  ) {}\r\n\r\n  async getFiltered(ceriteria: string): Promise<Classes[]> {\r\n    let queryResult = await this.findAll();\r\n    if (ceriteria)\r\n    queryResult = queryResult.filter(entity => entity.name === ceriteria)\r\n    return queryResult;\r\n  }\r\n  findAll(): Promise<Classes[]> {\r\n    return this.classesRepository.find();\r\n  }\r\n\r\n  findOne(id: number): Promise<Classes> {\r\n    return this.classesRepository.findOneBy({id:id});\r\n  }\r\n\r\n  create(country: Classes): Promise<Classes> {\r\n    return this.classesRepository.save(country);\r\n  }\r\n\r\n  remove(id: number): Promise<DeleteResult> {\r\n    return this.classesRepository.delete(id);\r\n  }\r\n  update(id: number,classes:Classes): Promise<DeleteResult> {\r\n    return this.classesRepository.update(id,classes);\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  NotFoundException,\r\n  Param,\r\n  ParseIntPipe,\r\n  Patch,\r\n  Post,\r\n  Query,\r\n} from '@nestjs/common';\r\n\r\nimport { Countries } from './entities/countries.entity';\r\n\r\n//import { Message } from '@rihal/api-interfaces';\r\n\r\nimport { CountriesService } from './countries.service';\r\n\r\n@Controller('countries')\r\nexport class CountriesController {\r\n  constructor(private readonly countriesService: CountriesService) {}\r\n\r\n\r\n  @Get('/')\r\n  async get(@Query() filterDTO: string) {\r\n    if (Object.keys(filterDTO).length)\r\n      return await this.countriesService.getFiltered(filterDTO);\r\n    else return await this.countriesService.findAll();\r\n  }\r\n\r\n  @Get('/:id')\r\n  async find(@Param('id') id: number) {\r\n    const countries = await this.countriesService.findOne(id);\r\n    if (!countries) throw new NotFoundException('Product does not exist!');\r\n    return countries;\r\n  }\r\n\r\n  @Post()\r\n  add(@Body() countries: Countries) {\r\n    return this.countriesService.create(countries);\r\n  }\r\n\r\n  @Patch(':id')\r\n  async update(@Body() dto: Countries, @Param('id') id: number): Promise<number> {\r\n    const updatedResult = await this.countriesService.update(id, dto);\r\n    if (updatedResult.affected === 0)\r\n      throw new NotFoundException('countries not found');\r\n    // const {name} = updatedResult\r\n    return 204;\r\n  }\r\n  @Delete(':id')\r\n  remove(@Param('id', ParseIntPipe) id) {\r\n    this.countriesService.remove(id);\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\n//import { Message } from '@rihal/api-interfaces';\r\n\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { DeleteResult, Repository } from 'typeorm';\r\n\r\nimport { Countries } from './entities/countries.entity';\r\n\r\n@Injectable()\r\nexport class CountriesService {\r\n  constructor(\r\n    @InjectRepository(Countries)\r\n    private countriesRepository: Repository<Countries>\r\n  ) {}\r\n\r\n\r\n  async getFiltered(ceriteria: string): Promise<Countries[]> {\r\n    let queryResult = await this.findAll();\r\n    if (ceriteria)\r\n    queryResult = queryResult.filter(entity => entity.name === ceriteria)\r\n    return queryResult;\r\n  }\r\n  findAll(): Promise<Countries[]> {\r\n    return this.countriesRepository.find();\r\n  }\r\n\r\n  findOne(id: number): Promise<Countries> {\r\n    return this.countriesRepository.findOneBy({id:id});\r\n  }\r\n\r\n  create(country: Countries): Promise<Countries> {\r\n    return this.countriesRepository.save(country);\r\n  }\r\n\r\n  remove(id: number): Promise<DeleteResult> {\r\n    return this.countriesRepository.delete(id);\r\n  }\r\n  update(id: number,countries:Countries): Promise<DeleteResult> {\r\n    return this.countriesRepository.update(id,countries);\r\n  }\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn,CreateDateColumn, UpdateDateColumn,OneToMany } from 'typeorm';\r\nimport { Student } from \"./student.entity\"\r\n@Entity('classes')\r\nexport class Classes{\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  @Column({ name: \"class_name\" ,length: 255})\r\n  name: string;\r\n\r\n  @OneToMany(() => Student, (student) => student.classes,{cascade: true})\r\n  students: Student[]\r\n\r\n  @CreateDateColumn({type: \"timestamp\"})\r\n  CreatedDate : Date;\r\n\r\n  @UpdateDateColumn({type: \"timestamp\"})\r\n  ModifiedDate : Date;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn,CreateDateColumn, UpdateDateColumn,OneToMany, JoinColumn } from 'typeorm';\r\nimport { Student } from \"./student.entity\"\r\n@Entity('countries')\r\nexport class Countries{\r\n  @PrimaryGeneratedColumn({name:\"id\"})\r\n  id: number;\r\n\r\n  @Column({ name: \"name\" ,length: 255})\r\n  name: string;\r\n\r\n  @OneToMany(() => Student, (student) => student.countries)\r\n  @JoinColumn({ name: \"studentid\" })\r\n  students: Student[]\r\n\r\n\r\n  @CreateDateColumn({type: \"timestamp\"})\r\n  CreatedDate : Date;\r\n\r\n  @UpdateDateColumn({type: \"timestamp\"})\r\n  ModifiedDate : Date;\r\n}\r\n\r\n","import { Column, Entity, PrimaryGeneratedColumn,CreateDateColumn, UpdateDateColumn,ManyToOne, JoinColumn} from 'typeorm';\r\nimport { Classes } from \"./classes.entity\"\r\nimport { Countries } from \"./countries.entity\"\r\n@Entity('student')\r\nexport class Student{\r\n  @PrimaryGeneratedColumn({name:\"id\"})\r\n  id: number;\r\n\r\n  @Column({ length: 255})\r\n  name: string;\r\n\r\n  @Column({ type: 'date' ,name: \"date_of_birth\" })\r\n  dateOfBirth: Date;\r\n\r\n\r\n  @Column({ name: \"classesId\" })\r\n  @ManyToOne(() => Classes, (classes) => classes.students,{ onDelete: 'CASCADE'\r\n  //,eager:true\r\n  })\r\n  @JoinColumn({ name: \"classesId\", referencedColumnName: \"id\" })\r\n  classes: Classes;\r\n\r\n  @Column({ name: \"countriesId\" })\r\n  @ManyToOne(() => Countries, (countries) => countries.students)\r\n  @JoinColumn({ name: \"countriesId\", referencedColumnName: \"id\" })\r\n  countries: Countries;\r\n\r\n\r\n  @CreateDateColumn({type: \"timestamp\"})\r\n  CreatedDate : Date;\r\n\r\n  @UpdateDateColumn({type: \"timestamp\"})\r\n  ModifiedDate : Date;\r\n\r\n}\r\n","import { ViewEntity, ViewColumn, DataSource } from \"typeorm\"\r\n\r\n\r\n@ViewEntity({\r\n expression: `\r\n select \"t2\".\"id\" \"id\" ,\"t2\".\"name\", \"t2\".\"date_of_birth\" \"dateOfBirth\", \"t2\".\"countriesId\", \"t3\".\"name\" \"countryName\" ,\"t2\".\"classesId\",\"t4\".\"class_name\" \"classesName\"\r\n from \"student\" \"t2\"\r\n inner join \"countries\" \"t3\" on \"t2\".\"countriesId\"=\"t3\".\"id\"\r\n inner join \"classes\" \"t4\" on \"t2\".\"classesId\"=\"t4\".\"id\";\r\n `\r\n})\r\nexport class StudentClass {\r\n    @ViewColumn()\r\n    id: number\r\n\r\n    @ViewColumn()\r\n    name: string\r\n\r\n    @ViewColumn()\r\n    dateOfBirth: Date\r\n\r\n    @ViewColumn()\r\n    countriesId: number\r\n\r\n    @ViewColumn()\r\n    countryName: string\r\n\r\n    @ViewColumn()\r\n    classesId: number\r\n\r\n    @ViewColumn()\r\n    classesName: string\r\n\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  NotFoundException,\r\n  Param,\r\n  ParseIntPipe,\r\n  Patch,\r\n  Post,\r\n  Put,\r\n  Query,\r\n  UsePipes,\r\n  ValidationPipe,\r\n} from '@nestjs/common';\r\n\r\nimport { StudentSearchDTO } from '../../validations/StudentSearchDTO';\r\nimport { SearchStudentClassesDto } from './entities/dto/searchStudentClasses';\r\n\r\nimport { Student } from './entities/student.entity';\r\nimport { StudentClass } from './entities/studentClass.viewentity';\r\n\r\n//import { Message } from '@rihal/api-interfaces';\r\n\r\nimport { StudentService } from './student.service';\r\n\r\n@Controller('student')\r\nexport class StudentController {\r\n  constructor(private readonly studentService: StudentService) {}\r\n\r\n  @Post('/search')\r\n  //@UsePipes(new ValidationPipe({ transform: true }))\r\n  async getStudents(\r\n    //@Body() studentSearchDTO: StudentSearchDTO,\r\n    @Query('sort') sort: string,\r\n    @Query('order') order: string,\r\n    @Query('page') page: number,\r\n    @Query('query') query: string\r\n  ): Promise<SearchStudentClassesDto> {\r\n    // if (Object.keys(studentSearchDTO).length) {\r\n    const filteredStudents = await this.studentService.getFilteredStudent(\r\n      sort,\r\n      order,\r\n      page,\r\n      query\r\n      // studentSearchDTO\r\n    );\r\n    return filteredStudents;\r\n    // } else {\r\n    //   const allStudents = await this.studentService.findAll();\r\n    //   return allStudents;\r\n    // }\r\n  }\r\n\r\n  @Get('/:id')\r\n  async find(@Param('id') id: number): Promise<StudentClass> {\r\n    const student = await this.studentService.findOne(id);\r\n    if (!student) throw new NotFoundException('student does not exist!');\r\n    return student;\r\n  }\r\n\r\n  @Post()\r\n  create(@Body() student: Student) {\r\n    return this.studentService.create(student);\r\n  }\r\n\r\n  @Put('/:id')\r\n  async update(\r\n    @Body() studentDto: Student,\r\n    @Param('id') id: string\r\n  ): Promise<number> {\r\n    const studentUpdated = await this.studentService.update(id, studentDto);\r\n    if (studentUpdated.affected === 0)\r\n      throw new NotFoundException('student not found');\r\n  //  const { name } = studentUpdated;\r\n    return 204;\r\n  }\r\n\r\n  @Delete(':id')\r\n  remove(@Param('id', ParseIntPipe) id) {\r\n    this.studentService.remove(id);\r\n  }\r\n}\r\n\r\nfunction put(arg0: string) {\r\n  throw new Error('Function not implemented.');\r\n}\r\n","import { Module, OnApplicationBootstrap } from '@nestjs/common';\r\n\r\nimport { Student } from './entities/student.entity';\r\nimport { Classes } from './entities/classes.entity';\r\nimport { Countries } from './entities/countries.entity';\r\nimport { StudentClass } from './entities/studentClass.viewentity';\r\n\r\nimport { StudentController } from './student.controller';\r\nimport { StudentService } from './student.service';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\n\r\nimport { CountriesService } from './countries.service';\r\nimport { CountriesController } from './countries.controller';\r\nimport { ClassesController } from './classes.controller';\r\nimport { ClassesService } from './classes.service';\r\n\r\nimport { SeedingService } from '../../seeds/seeding.service';\r\n\r\n\r\n\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([Student, Classes, Countries,StudentClass])],\r\n  controllers: [\r\n    StudentController,\r\n    CountriesController,\r\n    ClassesController,\r\n  ],\r\n  providers: [\r\n    StudentService,\r\n    CountriesService,\r\n    ClassesService,\r\n    SeedingService,\r\n  ],\r\n})\r\nexport class StudentModule implements OnApplicationBootstrap {\r\n  constructor(private readonly seedingService: SeedingService) {}\r\n  async onApplicationBootstrap(): Promise<void> {\r\n  //  await this.seedingDatabase();\r\n  }\r\n\r\n  private async seedingDatabase() {\r\n    await this.seedingService.dropTables();\r\n    for (let i = 0; i < 10; i++) await this.seedingService.seedBaseTables();\r\n    for (let i = 0; i < 110; i++) await this.seedingService.seedStudent();\r\n    // now set randows classes & countries for student\r\n    await this.seedingService.seedStudentUpdate();\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\n//import { Message } from '@rihal/api-interfaces';\r\nimport { Student } from './entities/student.entity';\r\nimport { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\nimport { DataSource, DeleteResult, ILike, Repository, UpdateResult } from 'typeorm';\r\n\r\nimport { StudentSearchDTO } from '../../validations/StudentSearchDTO';\r\nimport { Classes } from './entities/classes.entity';\r\nimport { StudentClass } from './entities/studentClass.viewentity';\r\nimport { SearchStudentClassesDto } from './entities/dto/searchStudentClasses';\r\n\r\n\r\n@Injectable()\r\nexport class StudentService {\r\n  constructor(\r\n    @InjectRepository(Student)\r\n    private studentsRepository: Repository<Student>,\r\n    @InjectRepository(StudentClass)\r\n    private studentClassRepository: Repository<StudentClass>,\r\n    @InjectDataSource() private readonly datasource: DataSource\r\n  ) {\r\n\r\n  }\r\n\r\n\r\n  async getFilteredStudent(\r\n    sort: string,\r\n    order: string,\r\n    page: number,\r\n    query: string\r\n\r\n  ): Promise<SearchStudentClassesDto> {\r\n    const take=10\r\n\r\n     const [data, total]= await (await this.datasource.manager.findAndCount(StudentClass,{\r\n      where: [{\r\n        name: ILike(`%${query}%`),\r\n        //email: ILike(`%${search}%`)\r\n    }],\r\n      order: {\r\n        [sort]: order\r\n    },\r\n    take,\r\n    skip: (page - 1) * take\r\n     }))\r\n     return {\r\n      studentClasses: data,\r\n      count: total\r\n  }\r\n\r\n  }\r\n\r\n  async findOne(id: number): Promise<StudentClass> {\r\n    // return this.studentsRepository.findOneBy({ id: id });\r\n    const student = await this.studentClassRepository.findOneBy({ id: id });\r\n    // const categories = await student.classes\r\n    return student;\r\n  }\r\n\r\n  create(Student: Student): Promise<Student> {\r\n    return this.studentsRepository.save(Student);\r\n    // return this.studentsRepository.find();\r\n  }\r\n  async update(\r\n    id: string,\r\n    studentDto: Student\r\n  ): Promise<Partial<UpdateResult>> {\r\n    const updated = await this.studentsRepository.update(id, studentDto);\r\n    // const {name} = updated\r\n    return updated;\r\n  }\r\n  remove(id: string): Promise<DeleteResult> {\r\n    return this.studentsRepository.delete(id);\r\n  }\r\n}\r\n","export * from './rihalLogger.module';\nexport * from './rihal-logger.service';\n","import { ConsoleLogger, Injectable, Scope } from '@nestjs/common';\r\n\r\n\r\n@Injectable({ scope: Scope.TRANSIENT })\r\nexport class RihalLoggerService extends ConsoleLogger implements RihalLoggerService {\r\n  /**\r\n   * Write a 'log' level log.\r\n   */\r\n  log(message: any, ...optionalParams: any[]) {}\r\n\r\n  customLog() {\r\n    this.log('Please feed the cat!');\r\n  }\r\n  /**\r\n   * Write an 'error' level log.\r\n   */\r\n\r\n  error(message: any, stack?: string, context?: string) {\r\n    // add your tailored logic here\r\n   // super.error(...arguments);\r\n  }\r\n\r\n  /**\r\n   * Write a 'warn' level log.\r\n   */\r\n  warn(message: any, ...optionalParams: any[]) {}\r\n\r\n  /**\r\n   * Write a 'debug' level log.\r\n   */\r\n  // debug?(message: any, ...optionalParams: any[]) {}\r\n\r\n  /**\r\n   * Write a 'verbose' level log.\r\n   */\r\n  //verbose?(message: any, ...optionalParams: any[]) {}\r\n}\r\n","\nimport { Module } from '@nestjs/common';\nimport { RihalLoggerService } from './rihal-logger.service';\n\n@Module({\n  providers: [RihalLoggerService],\n  exports: [RihalLoggerService],\n})\nexport class RihalLoggerModule {}\n","import { Countries } from '../domains/student/entities/countries.entity';\r\nimport { Student } from '../domains/student/entities/student.entity';\r\nimport { faker } from '@faker-js/faker';\r\n//import { User, Post } from \"../../entities\";\r\n\r\nexport function InitialCountrySeed(entity: string) {\r\n  return fakerCountry();\r\n}\r\nexport function InitialClassesSeed(entity: string) {\r\n  return fakerClasses();\r\n}\r\nexport function InitialStudentSeed(entity: string) {\r\n  return fakerStudent();\r\n}\r\nconst fakerCountry = (): any => ({\r\n  countryName: faker.address.country(),\r\n});\r\n\r\nconst fakerClasses = (): any => ({\r\n  className: faker.helpers.arrayElement(['arts', 'science', 'front end developing','full stack developer',\"yuga\",\"spanish\",\"cooking\",\"meditation\",\"negotiation\",\"life tricks\"])\r\n});\r\n\r\nconst fakerStudent = (): any => ({\r\n  name: faker.name.firstName() +\" \"+ faker.name.lastName(),\r\n  dateOfBirth: faker.date.between('1970-01-01', '2019-01-05'),\r\n  classesId :faker.datatype.number({'min': 41,'max': 50}),\r\n  //countriesId:faker.datatype.number({'min': 51,'max': 60}),\r\n  classes:fakerClasses(),\r\n  countries:fakerCountry(),\r\n  //email: faker.internet.email(),\r\n  //password: faker.internet.password(),\r\n\r\n});\r\n","import { Injectable, Logger } from '@nestjs/common';\r\nimport { EntityManager } from 'typeorm';\r\nimport { Classes } from '../domains/student/entities/classes.entity';\r\n\r\nimport { Countries } from '../domains/student/entities/countries.entity';\r\nimport { Student } from '../domains/student/entities/student.entity';\r\n\r\nimport {\r\n  InitialCountrySeed,\r\n  InitialClassesSeed,\r\n  InitialStudentSeed,\r\n} from './initialSeed';\r\n\r\n// import { RoleEntity } from 'src/entities/role.entity';\r\n\r\n// import { roleSeeds } from 'src/seeds/role.seeds';\r\n\r\n@Injectable()\r\nexport class SeedingService {\r\n  constructor(private readonly entityManager: EntityManager) {}\r\n\r\n  async dropTables(): Promise<void> {\r\n    await Promise.all([\r\n      this.entityManager.query(\r\n        `\r\n          truncate TABLE student RESTART IDENTITY CASCADE;\r\n          truncate TABLE  classes  RESTART IDENTITY CASCADE;\r\n          truncate TABLE countries  RESTART IDENTITY CASCADE;\r\n        `,\r\n        null\r\n      ),\r\n      //this.entityManager.query(`delete from classes;`,null)\r\n    ]);\r\n  }\r\n  async seedBaseTables(): Promise<void> {\r\n    await Promise.all([\r\n      this.entityManager.save(Countries, InitialCountrySeed('countries')),\r\n      this.entityManager.save(Classes, InitialClassesSeed('classes')),\r\n      //  this.entityManager.save(Student, InitialDatabaseSeed(\"student\")),\r\n    ]);\r\n  }\r\n  async seedStudent(): Promise<void> {\r\n    await Promise.all([\r\n      this.entityManager.save(Student, InitialStudentSeed('student')),\r\n    ]);\r\n  }\r\n  async seedStudentUpdate(): Promise<void> {\r\n    await Promise.all([\r\n      this.entityManager.query(\r\n        `\r\n      update student set\r\n      \"classesId\"=floor(random() * 9 + 1), \"countriesId\"=\r\n      floor(random() * 9 + 1)\r\n      WHERE id is not null;`,\r\n        null\r\n      ),\r\n    ]);\r\n  }\r\n}\r\n","module.exports = require(\"@faker-js/faker\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * This is not a production server yet!\r\n * This is only a minimal backend to get started.\r\n */\r\n\r\n\r\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\r\nimport {  NestFactory } from '@nestjs/core';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { Logger, ValidationPipe } from '@nestjs/common';\r\nimport {  RihalLoggerService } from './app/logger';\r\n\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule, {\r\n    cors: true\r\n  })\r\n  const globalPrefix = 'api';\r\n  app.setGlobalPrefix(globalPrefix);\r\n\r\n // Initialize global exception filter\r\n\r\n\r\n//  const logger = app.select(AppModule).get(AppLoggerService, {strict: true});\r\n// app.useGlobalFilters(new AllExceptionsFilter(httpRef, logger));\r\n\r\n  const config = new DocumentBuilder()\r\n    .setTitle('learnify app APIs')\r\n    .setDescription('The rihals assessment API description')\r\n    .setVersion('1.0')\r\n    .addTag('Student/Reports')\r\n    .build();\r\n  const document = SwaggerModule.createDocument(app, config);\r\n  SwaggerModule.setup('api', app, document);\r\n\r\n //custom logger\r\n  //app.useLogger(new RihalLoggerService());\r\n\r\n  const port = process.env.PORT || 3333;\r\n  await app.listen(port);\r\n  app.useGlobalPipes(new ValidationPipe({whitelist: true}));\r\n  Logger.log(\r\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\r\n  );\r\n}\r\n\r\nbootstrap();\r\n"],"names":["AppModule","Module","imports","StudentModule","ReportingModule","RihalLoggerModule","ConfigModule","forRoot","TypeOrmModule","type","url","synchronize","autoLoadEntities","entities","ServeStaticModule","rootPath","join","__dirname","controllers","providers","RihalLoggerService","forFeature","Student","Classes","Countries","ReportsController","ReportsService","constructor","reportsService","myLogger","this","setContext","averageStudentsAge","fetchCountBy","relatedEntity","studentId","Get","ApiOperation","summary","ApiResponse","status","description","Promise","Param","Controller","datasource","relatedColumn","getRepository","createQueryBuilder","select","innerJoin","addSelect","groupBy","getRawMany","Injectable","InjectRepository","InjectDataSource","Repository","DataSource","ClassesController","classesService","get","filterDTO","Object","keys","length","getFiltered","findAll","find","id","classes","findOne","NotFoundException","add","create","update","dto","affected","remove","Query","Post","Body","Patch","Delete","ParseIntPipe","ClassesService","classesRepository","ceriteria","queryResult","filter","entity","name","findOneBy","country","save","delete","CountriesController","countriesService","countries","CountriesService","countriesRepository","PrimaryGeneratedColumn","Column","OneToMany","student","cascade","CreateDateColumn","Date","UpdateDateColumn","Entity","JoinColumn","ManyToOne","students","onDelete","referencedColumnName","StudentClass","ViewColumn","ViewEntity","expression","StudentController","studentService","getStudents","sort","order","page","query","getFilteredStudent","studentDto","Put","StudentService","seedingService","onApplicationBootstrap","seedingDatabase","dropTables","i","seedBaseTables","seedStudent","seedStudentUpdate","SeedingService","studentsRepository","studentClassRepository","data","total","manager","findAndCount","where","ILike","take","skip","studentClasses","count","ConsoleLogger","log","message","optionalParams","customLog","error","stack","context","warn","scope","Scope","TRANSIENT","exports","fakerCountry","fakerClasses","fakerStudent","countryName","faker","address","className","helpers","arrayElement","firstName","lastName","dateOfBirth","date","between","classesId","datatype","number","entityManager","all","InitialCountrySeed","InitialClassesSeed","InitialStudentSeed","EntityManager","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","app","NestFactory","cors","setGlobalPrefix","config","DocumentBuilder","setTitle","setDescription","setVersion","addTag","build","document","SwaggerModule","createDocument","setup","port","process","env","PORT","listen","useGlobalPipes","ValidationPipe","whitelist","Logger","bootstrap"],"sourceRoot":""}