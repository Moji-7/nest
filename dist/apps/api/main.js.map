{"version":3,"file":"main.js","mappings":"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","sources":["webpack://rihal/./apps/api/src/app/app.module.ts","webpack://rihal/./apps/api/src/app/domains/reporting/reporting.module.ts","webpack://rihal/./apps/api/src/app/domains/reporting/reports.controller.ts","webpack://rihal/./apps/api/src/app/domains/reporting/reports.service.ts","webpack://rihal/./apps/api/src/app/domains/student/classes.controller.ts","webpack://rihal/./apps/api/src/app/domains/student/classes.service.ts","webpack://rihal/./apps/api/src/app/domains/student/countries.controller.ts","webpack://rihal/./apps/api/src/app/domains/student/countries.service.ts","webpack://rihal/./apps/api/src/app/domains/student/entities/classes.entity.ts","webpack://rihal/./apps/api/src/app/domains/student/entities/countries.entity.ts","webpack://rihal/./apps/api/src/app/domains/student/entities/student.entity.ts","webpack://rihal/./apps/api/src/app/domains/student/entities/studentClass.viewentity.ts","webpack://rihal/./apps/api/src/app/domains/student/student.controller.ts","webpack://rihal/./apps/api/src/app/domains/student/student.module.ts","webpack://rihal/./apps/api/src/app/domains/student/student.service.ts","webpack://rihal/./apps/api/src/app/logger/index.ts","webpack://rihal/./apps/api/src/app/logger/rihal-logger.service.ts","webpack://rihal/./apps/api/src/app/logger/rihalLogger.module.ts","webpack://rihal/./apps/api/src/app/seeds/initialSeed.ts","webpack://rihal/./apps/api/src/app/seeds/seeding.service.ts","webpack://rihal/external commonjs \"@faker-js/faker\"","webpack://rihal/external commonjs \"@nestjs/common\"","webpack://rihal/external commonjs \"@nestjs/config\"","webpack://rihal/external commonjs \"@nestjs/core\"","webpack://rihal/external commonjs \"@nestjs/serve-static\"","webpack://rihal/external commonjs \"@nestjs/swagger\"","webpack://rihal/external commonjs \"@nestjs/typeorm\"","webpack://rihal/external commonjs \"tslib\"","webpack://rihal/external commonjs \"typeorm\"","webpack://rihal/external node-commonjs \"path\"","webpack://rihal/webpack/bootstrap","webpack://rihal/./apps/api/src/main.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\r\n\r\nimport { StudentModule } from './domains/student/student.module';\r\nimport { ReportingModule } from './domains/reporting/reporting.module';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { RihalLoggerModule, RihalLoggerService } from './logger';\r\nimport { ServeStaticModule } from '@nestjs/serve-static';\r\nimport { join } from 'path';\r\n\r\n@Module({\r\n  imports: [\r\n    StudentModule,\r\n    ReportingModule,\r\n    RihalLoggerModule,\r\n    ConfigModule.forRoot(),\r\n    TypeOrmModule.forRoot({\r\n      //\r\n      // // locally database\r\n      // type: 'postgres',\r\n      // host: 'localhost', //configService.get<string>('DATABASE_HOST'),\r\n      // port: 5432, //parseInt(configService.get<string>('DATABASE_PORT')),\r\n      // username: 'postgres', //configService.get<string>('DATABASE_USER'),\r\n      // password: 'root', //configService.get<string>('DATABASE_PASS'),\r\n      // database: 'rihaldb', //configService.get<string>('DATABASE_NAME'),\r\n      // entities: ['dist/**/*.entity{.ts,.js}'],\r\n      // synchronize: true, // This for development\r\n      // autoLoadEntities: true,\r\n\r\n      //1 elephentSQL\r\n        type: 'postgres',\r\n        url: 'postgres://kfawlatn:dUMCryTxhvULGBSAYPA-3pazDHSbE30k@dumbo.db.elephantsql.com/kfawlatn',\r\n        synchronize: true,\r\n       // logging: true,\r\n        autoLoadEntities: true,\r\n        entities: ['dist/**/*.entity{.ts,.js}'],\r\n\r\n      // //2 heroku\r\n      // url: 'postgres://dyjinesbtbjwab:fad4f80e287db7a0781b527e964902970452bd4677ef33eaae64c773e67e2442@ec2-44-210-36-247.compute-1.amazonaws.com:5432/d2m7n1a4j8m4nn',\r\n      // ssl: {\r\n      //   rejectUnauthorized: false,\r\n      // },\r\n      // entities: ['dist/**/*.entity{.ts,.js}'],\r\n      //3 local host\r\n    }),\r\n      ServeStaticModule.forRoot({\r\n      rootPath: join(__dirname, '..', 'front'),\r\n    }),\r\n  ],\r\n  controllers: [],\r\n  providers: [RihalLoggerService],\r\n  // exports:[RihalLoggerModule]\r\n})\r\nexport class AppModule {}\r\n","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { RihalLoggerModule } from '../../logger';\r\n\r\nimport { Classes } from '../student/entities/classes.entity';\r\nimport { Countries } from '../student/entities/countries.entity';\r\nimport { Student } from '../student/entities/student.entity';\r\n\r\nimport { ReportsController } from './reports.controller';\r\nimport { ReportsService } from './reports.service';\r\n\r\n@Module({\r\n  imports: [RihalLoggerModule,\r\n    TypeOrmModule.forFeature([Student, Classes, Countries]),\r\n\r\n  ],\r\n  controllers: [ReportsController],\r\n  providers: [ReportsService,RihalLoggerModule],\r\n})\r\nexport class ReportingModule {}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Get,\r\n  HttpException,\r\n  HttpStatus,\r\n  NotFoundException,\r\n  Param,\r\n  Query,\r\n} from '@nestjs/common';\r\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\r\nimport { StudentSummeryInfo } from '@rihal/data-models';\r\nimport { RihalLoggerService } from '../../logger/rihal-logger.service';\r\n\r\nimport { ReportsService } from './reports.service';\r\n\r\n@Controller('reports')\r\nexport class ReportsController {\r\n  constructor(\r\n    private readonly reportsService: ReportsService,\r\n    private myLogger: RihalLoggerService\r\n  ) {\r\n    this.myLogger.setContext('ReportsController');\r\n  }\r\n\r\n  @Get('ageAverage')\r\n  @ApiOperation({ summary: 'for get count of students per year of birth' })\r\n  @ApiResponse({ status: 200, description: '' })\r\n  async averageStudentsAge(): Promise<StudentSummeryInfo[]> {\r\n    const summeryInfoService = await this.reportsService.averageStudentsAge();\r\n    return summeryInfoService;\r\n    // const average = summeryInfoService.reduce(function (avg, value, _, { length }) {\r\n    //   return avg + value.year / length ;\r\n    // return {title:avg + value.year / length , count:length};\r\n    //  }, 0);\r\n    //this.myLogger.customLog();this.myLogger.warn('About to return cats!');\r\n    //throw new HttpException('This is not acceptable', HttpStatus.NOT_ACCEPTABLE);\r\n  }\r\n\r\n  @Get('/:relatedEntity')\r\n  @ApiOperation({\r\n    summary:\r\n      'for get count of students per each input entity(classes,countries)',\r\n  })\r\n  @ApiResponse({ status: 200, description: '' })\r\n  async fetchCountBy(\r\n    @Param('relatedEntity') relatedEntity: string,\r\n    studentId: number\r\n  ): Promise<StudentSummeryInfo[]> {\r\n    const summeryInfoService = await this.reportsService.fetchCountBy(\r\n      relatedEntity,\r\n      studentId\r\n    );\r\n    return summeryInfoService;\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { DataSource, Repository } from 'typeorm';\r\nimport { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\nimport { StudentSummeryInfo } from '@rihal/data-models';\r\nimport { Student } from '../student/entities/student.entity';\r\n\r\n\r\n@Injectable()\r\nexport class ReportsService {\r\n  constructor(\r\n    @InjectRepository(Student)\r\n    private reportsService: Repository<Student>,\r\n    @InjectDataSource() private readonly datasource: DataSource\r\n  ) {}\r\n\r\n  async fetchCountBy(\r\n    relatedEntity: string,\r\n    studentId: number\r\n  ): Promise<StudentSummeryInfo[]> {\r\n    const relatedColumn =\r\n    relatedEntity === 'classes' ? 'classes.class_name' : 'countries.name';\r\n    const res = await this.datasource\r\n      .getRepository(Student)\r\n      .createQueryBuilder('student')\r\n      .select(relatedColumn, 'name')\r\n      //.addSelect('student.name')\r\n      .innerJoin('student.' + relatedEntity, relatedEntity)\r\n      .addSelect('count(student.id)', 'value')\r\n      .groupBy(relatedColumn)\r\n      //.addGroupBy('student.name')\r\n      //.where('student.name = :name', { name: groupbyCol })\r\n      .getRawMany();\r\n    return res;\r\n  }\r\n\r\n  async averageStudentsAge(): Promise<StudentSummeryInfo[]> {\r\n    const res = await this.datasource\r\n      .getRepository(Student)\r\n      .createQueryBuilder('student')\r\n      .select('EXTRACT(YEAR FROM student.date_of_birth)', 'name')\r\n      .addSelect('count(*)', 'value')\r\n       .groupBy('EXTRACT(YEAR FROM student.date_of_birth)')\r\n      .getRawMany();\r\n    return res;\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  NotFoundException,\r\n  Param,\r\n  ParseIntPipe,\r\n  Patch,\r\n  Post,\r\n  Query,\r\n} from '@nestjs/common';\r\n\r\nimport { Classes } from './entities/classes.entity';\r\n\r\n//import { Message } from '@rihal/api-interfaces';\r\n\r\nimport { ClassesService } from './classes.service';\r\n\r\n@Controller('classes')\r\nexport class ClassesController {\r\n  constructor(private readonly classesService: ClassesService) {}\r\n\r\n\r\n  @Get('/')\r\n  async get(@Query() filterDTO: string) {\r\n    if (Object.keys(filterDTO).length)\r\n      return await this.classesService.getFiltered(filterDTO);\r\n    else return await this.classesService.findAll();\r\n  }\r\n\r\n  @Get('/:id')\r\n  async find(@Param('id') id: number) {\r\n    const classes = await this.classesService.findOne(id);\r\n    if (!classes) throw new NotFoundException('Product does not exist!');\r\n    return classes;\r\n  }\r\n\r\n  @Post()\r\n  add(@Body() classes: Classes) {\r\n    return this.classesService.create(classes);\r\n  }\r\n\r\n  @Patch(':id')\r\n  async update(@Body() dto: Classes, @Param('id') id: number): Promise<number> {\r\n    const updatedResult = await this.classesService.update(id, dto);\r\n    if (updatedResult.affected === 0)\r\n      throw new NotFoundException('classes not found');\r\n    // const {name} = updatedResult\r\n    return 204;\r\n  }\r\n  @Delete(':id')\r\n  remove(@Param('id', ParseIntPipe) id) {\r\n    this.classesService.remove(id);\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\n//import { Message } from '@rihal/api-interfaces';\r\n\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { DeleteResult, Repository } from 'typeorm';\r\n\r\nimport { Classes } from './entities/classes.entity';\r\n\r\n@Injectable()\r\nexport class ClassesService {\r\n  constructor(\r\n    @InjectRepository(Classes)\r\n    private classesRepository: Repository<Classes>\r\n  ) {}\r\n\r\n  async getFiltered(ceriteria: string): Promise<Classes[]> {\r\n    let queryResult = await this.findAll();\r\n    if (ceriteria)\r\n    queryResult = queryResult.filter(entity => entity.name === ceriteria)\r\n    return queryResult;\r\n  }\r\n  findAll(): Promise<Classes[]> {\r\n    return this.classesRepository.find();\r\n  }\r\n\r\n  findOne(id: number): Promise<Classes> {\r\n    return this.classesRepository.findOneBy({id:id});\r\n  }\r\n\r\n  create(country: Classes): Promise<Classes> {\r\n    return this.classesRepository.save(country);\r\n  }\r\n\r\n  remove(id: number): Promise<DeleteResult> {\r\n    return this.classesRepository.delete(id);\r\n  }\r\n  update(id: number,classes:Classes): Promise<DeleteResult> {\r\n    return this.classesRepository.update(id,classes);\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  NotFoundException,\r\n  Param,\r\n  ParseIntPipe,\r\n  Patch,\r\n  Post,\r\n  Query,\r\n} from '@nestjs/common';\r\n\r\nimport { Countries } from './entities/countries.entity';\r\n\r\n//import { Message } from '@rihal/api-interfaces';\r\n\r\nimport { CountriesService } from './countries.service';\r\n\r\n@Controller('countries')\r\nexport class CountriesController {\r\n  constructor(private readonly countriesService: CountriesService) {}\r\n\r\n\r\n  @Get('/')\r\n  async get(@Query() filterDTO: string) {\r\n    if (Object.keys(filterDTO).length)\r\n      return await this.countriesService.getFiltered(filterDTO);\r\n    else return await this.countriesService.findAll();\r\n  }\r\n\r\n  @Get('/:id')\r\n  async find(@Param('id') id: number) {\r\n    const countries = await this.countriesService.findOne(id);\r\n    if (!countries) throw new NotFoundException('Product does not exist!');\r\n    return countries;\r\n  }\r\n\r\n  @Post()\r\n  add(@Body() countries: Countries) {\r\n    return this.countriesService.create(countries);\r\n  }\r\n\r\n  @Patch(':id')\r\n  async update(@Body() dto: Countries, @Param('id') id: number): Promise<number> {\r\n    const updatedResult = await this.countriesService.update(id, dto);\r\n    if (updatedResult.affected === 0)\r\n      throw new NotFoundException('countries not found');\r\n    // const {name} = updatedResult\r\n    return 204;\r\n  }\r\n  @Delete(':id')\r\n  remove(@Param('id', ParseIntPipe) id) {\r\n    this.countriesService.remove(id);\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\n//import { Message } from '@rihal/api-interfaces';\r\n\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { DeleteResult, Repository } from 'typeorm';\r\n\r\nimport { Countries } from './entities/countries.entity';\r\n\r\n@Injectable()\r\nexport class CountriesService {\r\n  constructor(\r\n    @InjectRepository(Countries)\r\n    private countriesRepository: Repository<Countries>\r\n  ) {}\r\n\r\n\r\n  async getFiltered(ceriteria: string): Promise<Countries[]> {\r\n    let queryResult = await this.findAll();\r\n    if (ceriteria)\r\n    queryResult = queryResult.filter(entity => entity.name === ceriteria)\r\n    return queryResult;\r\n  }\r\n  findAll(): Promise<Countries[]> {\r\n    return this.countriesRepository.find();\r\n  }\r\n\r\n  findOne(id: number): Promise<Countries> {\r\n    return this.countriesRepository.findOneBy({id:id});\r\n  }\r\n\r\n  create(country: Countries): Promise<Countries> {\r\n    return this.countriesRepository.save(country);\r\n  }\r\n\r\n  remove(id: number): Promise<DeleteResult> {\r\n    return this.countriesRepository.delete(id);\r\n  }\r\n  update(id: number,countries:Countries): Promise<DeleteResult> {\r\n    return this.countriesRepository.update(id,countries);\r\n  }\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn,CreateDateColumn, UpdateDateColumn,OneToMany } from 'typeorm';\r\nimport { Student } from \"./student.entity\"\r\n@Entity('classes')\r\nexport class Classes{\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  @Column({ name: \"class_name\" ,length: 255})\r\n  name: string;\r\n\r\n  @OneToMany(() => Student, (student) => student.classes,{cascade: true})\r\n  students: Student[]\r\n\r\n  @CreateDateColumn({type: \"timestamp\"})\r\n  CreatedDate : Date;\r\n\r\n  @UpdateDateColumn({type: \"timestamp\"})\r\n  ModifiedDate : Date;\r\n}\r\n","import { Column, Entity, PrimaryGeneratedColumn,CreateDateColumn, UpdateDateColumn,OneToMany, JoinColumn } from 'typeorm';\r\nimport { Student } from \"./student.entity\"\r\n@Entity('countries')\r\nexport class Countries{\r\n  @PrimaryGeneratedColumn({name:\"id\"})\r\n  id: number;\r\n\r\n  @Column({ name: \"name\" ,length: 255})\r\n  name: string;\r\n\r\n  @OneToMany(() => Student, (student) => student.countries)\r\n  @JoinColumn({ name: \"studentid\" })\r\n  students: Student[]\r\n\r\n\r\n  @CreateDateColumn({type: \"timestamp\"})\r\n  CreatedDate : Date;\r\n\r\n  @UpdateDateColumn({type: \"timestamp\"})\r\n  ModifiedDate : Date;\r\n}\r\n\r\n","import { Column, Entity, PrimaryGeneratedColumn,CreateDateColumn, UpdateDateColumn,ManyToOne, JoinColumn} from 'typeorm';\r\nimport { Classes } from \"./classes.entity\"\r\nimport { Countries } from \"./countries.entity\"\r\n@Entity('student')\r\nexport class Student{\r\n  @PrimaryGeneratedColumn({name:\"id\"})\r\n  id: number;\r\n\r\n  @Column({ length: 255})\r\n  name: string;\r\n\r\n  @Column({ type: 'date' ,name: \"date_of_birth\" })\r\n  dateOfBirth: Date;\r\n\r\n\r\n  @Column({ name: \"classesId\" })\r\n  @ManyToOne(() => Classes, (classes) => classes.students,{ onDelete: 'CASCADE'\r\n  //,eager:true\r\n  })\r\n  @JoinColumn({ name: \"classesId\", referencedColumnName: \"id\" })\r\n  classes: Classes;\r\n\r\n  @Column({ name: \"countriesId\" })\r\n  @ManyToOne(() => Countries, (countries) => countries.students)\r\n  @JoinColumn({ name: \"countriesId\", referencedColumnName: \"id\" })\r\n  countries: Countries;\r\n\r\n\r\n  @CreateDateColumn({type: \"timestamp\"})\r\n  CreatedDate : Date;\r\n\r\n  @UpdateDateColumn({type: \"timestamp\"})\r\n  ModifiedDate : Date;\r\n\r\n}\r\n","import { ViewEntity, ViewColumn, DataSource } from \"typeorm\"\r\n\r\n\r\n@ViewEntity({\r\n expression: `\r\n select \"t2\".\"id\" \"id\" ,\"t2\".\"name\", \"t2\".\"date_of_birth\" \"dateOfBirth\", \"t2\".\"countriesId\", \"t3\".\"name\" \"countryName\" ,\"t2\".\"classesId\",\"t4\".\"class_name\" \"classesName\"\r\n from \"student\" \"t2\"\r\n inner join \"countries\" \"t3\" on \"t2\".\"countriesId\"=\"t3\".\"id\"\r\n inner join \"classes\" \"t4\" on \"t2\".\"classesId\"=\"t4\".\"id\";\r\n `\r\n})\r\nexport class StudentClass {\r\n    @ViewColumn()\r\n    id: number\r\n\r\n    @ViewColumn()\r\n    name: string\r\n\r\n    @ViewColumn()\r\n    dateOfBirth: Date\r\n\r\n    @ViewColumn()\r\n    countriesId: number\r\n\r\n    @ViewColumn()\r\n    countryName: string\r\n\r\n    @ViewColumn()\r\n    classesId: number\r\n\r\n    @ViewColumn()\r\n    classesName: string\r\n\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  NotFoundException,\r\n  Param,\r\n  ParseIntPipe,\r\n  Patch,\r\n  Post,\r\n  Put,\r\n  Query,\r\n  UsePipes,\r\n  ValidationPipe,\r\n} from '@nestjs/common';\r\n\r\nimport { StudentSearchDTO } from '../../validations/StudentSearchDTO';\r\nimport { SearchStudentClassesDto } from './entities/dto/searchStudentClasses';\r\n\r\nimport { Student } from './entities/student.entity';\r\nimport { StudentClass } from './entities/studentClass.viewentity';\r\n\r\n//import { Message } from '@rihal/api-interfaces';\r\n\r\nimport { StudentService } from './student.service';\r\n\r\n@Controller('student')\r\nexport class StudentController {\r\n  constructor(private readonly studentService: StudentService) {}\r\n\r\n  @Post('/search')\r\n  //@UsePipes(new ValidationPipe({ transform: true }))\r\n  async getStudents(\r\n    //@Body() studentSearchDTO: StudentSearchDTO,\r\n    @Query('sort') sort: string,\r\n    @Query('order') order: string,\r\n    @Query('page') page: number,\r\n    @Query('query') query: string\r\n  ): Promise<SearchStudentClassesDto> {\r\n    // if (Object.keys(studentSearchDTO).length) {\r\n    const filteredStudents = await this.studentService.getFilteredStudent(\r\n      sort,\r\n      order,\r\n      page,\r\n      query\r\n      // studentSearchDTO\r\n    );\r\n    return filteredStudents;\r\n    // } else {\r\n    //   const allStudents = await this.studentService.findAll();\r\n    //   return allStudents;\r\n    // }\r\n  }\r\n\r\n  @Get('/:id')\r\n  async find(@Param('id') id: number): Promise<StudentClass> {\r\n    const student = await this.studentService.findOne(id);\r\n    if (!student) throw new NotFoundException('student does not exist!');\r\n    return student;\r\n  }\r\n\r\n  @Post()\r\n  create(@Body() student: Student) {\r\n    return this.studentService.create(student);\r\n  }\r\n\r\n  @Put('/:id')\r\n  async update(\r\n    @Body() studentDto: Student,\r\n    @Param('id') id: string\r\n  ): Promise<number> {\r\n    const studentUpdated = await this.studentService.update(id, studentDto);\r\n    if (studentUpdated.affected === 0)\r\n      throw new NotFoundException('student not found');\r\n  //  const { name } = studentUpdated;\r\n    return 204;\r\n  }\r\n\r\n  @Delete(':id')\r\n  remove(@Param('id', ParseIntPipe) id) {\r\n    this.studentService.remove(id);\r\n  }\r\n}\r\n\r\nfunction put(arg0: string) {\r\n  throw new Error('Function not implemented.');\r\n}\r\n","import { Module, OnApplicationBootstrap } from '@nestjs/common';\r\n\r\nimport { Student } from './entities/student.entity';\r\nimport { Classes } from './entities/classes.entity';\r\nimport { Countries } from './entities/countries.entity';\r\nimport { StudentClass } from './entities/studentClass.viewentity';\r\n\r\nimport { StudentController } from './student.controller';\r\nimport { StudentService } from './student.service';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\n\r\nimport { CountriesService } from './countries.service';\r\nimport { CountriesController } from './countries.controller';\r\nimport { ClassesController } from './classes.controller';\r\nimport { ClassesService } from './classes.service';\r\n\r\nimport { SeedingService } from '../../seeds/seeding.service';\r\n\r\n\r\n\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([Student, Classes, Countries,StudentClass])],\r\n  controllers: [\r\n    StudentController,\r\n    CountriesController,\r\n    ClassesController,\r\n  ],\r\n  providers: [\r\n    StudentService,\r\n    CountriesService,\r\n    ClassesService,\r\n    SeedingService,\r\n  ],\r\n})\r\nexport class StudentModule implements OnApplicationBootstrap {\r\n  constructor(private readonly seedingService: SeedingService) {}\r\n  async onApplicationBootstrap(): Promise<void> {\r\n  //  await this.seedingDatabase();\r\n  }\r\n\r\n  private async seedingDatabase() {\r\n    await this.seedingService.dropTables();\r\n    for (let i = 0; i < 10; i++) await this.seedingService.seedBaseTables();\r\n    for (let i = 0; i < 110; i++) await this.seedingService.seedStudent();\r\n    // now set randows classes & countries for student\r\n    await this.seedingService.seedStudentUpdate();\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\n//import { Message } from '@rihal/api-interfaces';\r\nimport { Student } from './entities/student.entity';\r\nimport { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\nimport { DataSource, DeleteResult, ILike, Repository, UpdateResult } from 'typeorm';\r\n\r\nimport { StudentSearchDTO } from '../../validations/StudentSearchDTO';\r\nimport { Classes } from './entities/classes.entity';\r\nimport { StudentClass } from './entities/studentClass.viewentity';\r\nimport { SearchStudentClassesDto } from './entities/dto/searchStudentClasses';\r\n\r\n\r\n@Injectable()\r\nexport class StudentService {\r\n  constructor(\r\n    @InjectRepository(Student)\r\n    private studentsRepository: Repository<Student>,\r\n    @InjectRepository(StudentClass)\r\n    private studentClassRepository: Repository<StudentClass>,\r\n    @InjectDataSource() private readonly datasource: DataSource\r\n  ) {\r\n\r\n  }\r\n\r\n\r\n  async getFilteredStudent(\r\n    sort: string,\r\n    order: string,\r\n    page: number,\r\n    query: string\r\n\r\n  ): Promise<SearchStudentClassesDto> {\r\n    const take=10\r\n\r\n     const [data, total]= await (await this.datasource.manager.findAndCount(StudentClass,{\r\n      where: [{\r\n        name: ILike(`%${query}%`),\r\n        //email: ILike(`%${search}%`)\r\n    }],\r\n      order: {\r\n        [sort]: order\r\n    },\r\n    take,\r\n    skip: (page - 1) * take\r\n     }))\r\n     return {\r\n      studentClasses: data,\r\n      count: total\r\n  }\r\n\r\n  }\r\n\r\n  async findOne(id: number): Promise<StudentClass> {\r\n    // return this.studentsRepository.findOneBy({ id: id });\r\n    const student = await this.studentClassRepository.findOneBy({ id: id });\r\n    // const categories = await student.classes\r\n    return student;\r\n  }\r\n\r\n  create(Student: Student): Promise<Student> {\r\n    return this.studentsRepository.save(Student);\r\n    // return this.studentsRepository.find();\r\n  }\r\n  async update(\r\n    id: string,\r\n    studentDto: Student\r\n  ): Promise<Partial<UpdateResult>> {\r\n    const updated = await this.studentsRepository.update(id, studentDto);\r\n    // const {name} = updated\r\n    return updated;\r\n  }\r\n  remove(id: string): Promise<DeleteResult> {\r\n    return this.studentsRepository.delete(id);\r\n  }\r\n}\r\n","export * from './rihalLogger.module';\r\nexport * from './rihal-logger.service';\r\n","import { ConsoleLogger, Injectable, Scope } from '@nestjs/common';\r\n\r\n\r\n@Injectable({ scope: Scope.TRANSIENT })\r\nexport class RihalLoggerService extends ConsoleLogger implements RihalLoggerService {\r\n  /**\r\n   * Write a 'log' level log.\r\n   */\r\n  log(message: any, ...optionalParams: any[]) {}\r\n\r\n  customLog() {\r\n    this.log('Please feed the cat!');\r\n  }\r\n  /**\r\n   * Write an 'error' level log.\r\n   */\r\n\r\n  error(message: any, stack?: string, context?: string) {\r\n    // add your tailored logic here\r\n   // super.error(...arguments);\r\n  }\r\n\r\n  /**\r\n   * Write a 'warn' level log.\r\n   */\r\n  warn(message: any, ...optionalParams: any[]) {}\r\n\r\n  /**\r\n   * Write a 'debug' level log.\r\n   */\r\n  // debug?(message: any, ...optionalParams: any[]) {}\r\n\r\n  /**\r\n   * Write a 'verbose' level log.\r\n   */\r\n  //verbose?(message: any, ...optionalParams: any[]) {}\r\n}\r\n","\r\nimport { Module } from '@nestjs/common';\r\nimport { RihalLoggerService } from './rihal-logger.service';\r\n\r\n@Module({\r\n  providers: [RihalLoggerService],\r\n  exports: [RihalLoggerService],\r\n})\r\nexport class RihalLoggerModule {}\r\n","import { Countries } from '../domains/student/entities/countries.entity';\r\nimport { Student } from '../domains/student/entities/student.entity';\r\nimport { faker } from '@faker-js/faker';\r\n//import { User, Post } from \"../../entities\";\r\n\r\nexport function InitialCountrySeed(entity: string) {\r\n  return fakerCountry();\r\n}\r\nexport function InitialClassesSeed(entity: string) {\r\n  return fakerClasses();\r\n}\r\nexport function InitialStudentSeed(entity: string) {\r\n  return fakerStudent();\r\n}\r\nconst fakerCountry = (): any => ({\r\n  countryName: faker.address.country(),\r\n});\r\n\r\nconst fakerClasses = (): any => ({\r\n  className: faker.helpers.arrayElement(['arts', 'science', 'front end developing','full stack developer',\"yuga\",\"spanish\",\"cooking\",\"meditation\",\"negotiation\",\"life tricks\"])\r\n});\r\n\r\nconst fakerStudent = (): any => ({\r\n  name: faker.name.firstName() +\" \"+ faker.name.lastName(),\r\n  dateOfBirth: faker.date.between('1970-01-01', '2019-01-05'),\r\n  classesId :faker.datatype.number({'min': 41,'max': 50}),\r\n  //countriesId:faker.datatype.number({'min': 51,'max': 60}),\r\n  classes:fakerClasses(),\r\n  countries:fakerCountry(),\r\n  //email: faker.internet.email(),\r\n  //password: faker.internet.password(),\r\n\r\n});\r\n","import { Injectable, Logger } from '@nestjs/common';\r\nimport { EntityManager } from 'typeorm';\r\nimport { Classes } from '../domains/student/entities/classes.entity';\r\n\r\nimport { Countries } from '../domains/student/entities/countries.entity';\r\nimport { Student } from '../domains/student/entities/student.entity';\r\n\r\nimport {\r\n  InitialCountrySeed,\r\n  InitialClassesSeed,\r\n  InitialStudentSeed,\r\n} from './initialSeed';\r\n\r\n// import { RoleEntity } from 'src/entities/role.entity';\r\n\r\n// import { roleSeeds } from 'src/seeds/role.seeds';\r\n\r\n@Injectable()\r\nexport class SeedingService {\r\n  constructor(private readonly entityManager: EntityManager) {}\r\n\r\n  async dropTables(): Promise<void> {\r\n    await Promise.all([\r\n      this.entityManager.query(\r\n        `\r\n          truncate TABLE student RESTART IDENTITY CASCADE;\r\n          truncate TABLE  classes  RESTART IDENTITY CASCADE;\r\n          truncate TABLE countries  RESTART IDENTITY CASCADE;\r\n        `,\r\n        null\r\n      ),\r\n      //this.entityManager.query(`delete from classes;`,null)\r\n    ]);\r\n  }\r\n  async seedBaseTables(): Promise<void> {\r\n    await Promise.all([\r\n      this.entityManager.save(Countries, InitialCountrySeed('countries')),\r\n      this.entityManager.save(Classes, InitialClassesSeed('classes')),\r\n      //  this.entityManager.save(Student, InitialDatabaseSeed(\"student\")),\r\n    ]);\r\n  }\r\n  async seedStudent(): Promise<void> {\r\n    await Promise.all([\r\n      this.entityManager.save(Student, InitialStudentSeed('student')),\r\n    ]);\r\n  }\r\n  async seedStudentUpdate(): Promise<void> {\r\n    await Promise.all([\r\n      this.entityManager.query(\r\n        `\r\n      update student set\r\n      \"classesId\"=floor(random() * 9 + 1), \"countriesId\"=\r\n      floor(random() * 9 + 1)\r\n      WHERE id is not null;`,\r\n        null\r\n      ),\r\n    ]);\r\n  }\r\n}\r\n","module.exports = require(\"@faker-js/faker\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * This is not a production server yet!\r\n * This is only a minimal backend to get started.\r\n */\r\n\r\n\r\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\r\nimport {  NestFactory } from '@nestjs/core';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { Logger, ValidationPipe } from '@nestjs/common';\r\nimport {  RihalLoggerService } from './app/logger';\r\n\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule, {\r\n    cors: true\r\n  })\r\n  const globalPrefix = 'api';\r\n  app.setGlobalPrefix(globalPrefix);\r\n\r\n // Initialize global exception filter\r\n\r\n\r\n//  const logger = app.select(AppModule).get(AppLoggerService, {strict: true});\r\n// app.useGlobalFilters(new AllExceptionsFilter(httpRef, logger));\r\n\r\n  const config = new DocumentBuilder()\r\n    .setTitle('learnify app APIs')\r\n    .setDescription('The rihals assessment API description')\r\n    .setVersion('1.0')\r\n    .addTag('Student/Reports')\r\n    .build();\r\n  const document = SwaggerModule.createDocument(app, config);\r\n  SwaggerModule.setup('api', app, document);\r\n\r\n //custom logger\r\n  //app.useLogger(new RihalLoggerService());\r\n\r\n  const port = process.env.PORT || 3333;\r\n  await app.listen(port);\r\n  app.useGlobalPipes(new ValidationPipe({whitelist: true}));\r\n  Logger.log(\r\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\r\n  );\r\n}\r\n\r\nbootstrap();\r\n"],"names":[],"sourceRoot":""}